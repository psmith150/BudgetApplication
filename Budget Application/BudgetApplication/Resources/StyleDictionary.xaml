<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:BudgetApplication"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:customControls="clr-namespace:BudgetApplication.CustomControls"
                    x:Class="BudgetApplication.StyleDictionary"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf">

    <!-- Default Button Style -->
    <!--<Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource OpenLibraryButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OpenLibraryButton.Static.Border}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="Center" Margin="1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OpenLibraryButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OpenLibraryButton.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OpenLibraryButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OpenLibraryButton.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OpenLibraryButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OpenLibraryButton.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource OpenLibraryButton.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!--#region Font Sizes-->
    <system:Double x:Key="MaxFontSize">18</system:Double>
    <system:Double x:Key="ExtraLargeFontSize">16</system:Double>
    <system:Double x:Key="LargeFontSize">14</system:Double>
    <system:Double x:Key="SmallFontSize">12</system:Double>
    <!--#endregion-->

    <!--#region Hover Button Style -->
    <Style TargetType="customControls:HoverButton">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:HoverButton}">
                    <DockPanel Background="{TemplateBinding Background}">
                        <ContentPresenter DockPanel.Dock="Left" 
                                          Width="{TemplateBinding ButtonImageWidth}"
                                          Content="{TemplateBinding ButtonImage}"
                                          Margin="{TemplateBinding ButtonImageMargin}">
                            <ContentPresenter.Style>
                                <Style TargetType="ContentPresenter">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Style>
                        </ContentPresenter>
                        <ContentPresenter Content="{TemplateBinding Content}"
							              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=HoverBackgroundBrush}"/>
                <Setter Property="ButtonImage" Value="{Binding RelativeSource={RelativeSource Self}, Path=ButtonHoverImage}"/>
                <Setter Property="Foreground"  Value="WhiteSmoke" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=DisabledBackgroundBrush}"/>
                <Setter Property="ButtonImage" Value="{Binding RelativeSource={RelativeSource Self}, Path=ButtonDisabledImage}"/>
                <Setter Property="Foreground"  Value="{Binding RelativeSource={RelativeSource Self}, Path=DisabledForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NavigationHoverButtonStyle" TargetType="customControls:HoverButton" BasedOn="{StaticResource {x:Type customControls:HoverButton}}">
        <Setter Property="Background">
            <Setter.Value>
                <RadialGradientBrush>
                    <GradientStop Color="#D8ADE8E3" Offset="0"/>
                    <GradientStop Color="#B2D2F7E7" Offset="0.987"/>
                </RadialGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="HoverBackgroundBrush" Value="LightBlue"/>
        <Setter Property="DisabledBackgroundBrush">
            <Setter.Value>
                <RadialGradientBrush>
                    <GradientStop Color="#FF64B9B2" Offset="0.01"/>
                    <GradientStop Color="#FF5EA687" Offset="0.987"/>
                </RadialGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="DisabledForegroundBrush" Value="White" />
        <Setter Property="Margin" Value="1 0 1 0"/>
        <Setter Property="Width" Value="130"/>
    </Style>
    <!--#endregion-->

    <!--#region Global Window Styles-->
    <Style x:Key="MainWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="AllowsTransparency" Value="False"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="46"/>
        <!--CaptionHeight + ResizeBorderThickness * 2-->
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <Style x:Key="PopupBorderStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="5" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderColor}" />
    </Style>
    <Style x:Key="OverlayGridStyle" TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource OverlayGridColor}" />
        <Setter Property="Opacity" Value="0.5" />
    </Style>
    <Style x:Key="BottomBarStyle" TargetType="DockPanel">
        <Setter Property="Height" Value="26"/>
        <Setter Property="Background" Value="{DynamicResource BottomBarBackgroundColor}"/>
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource BottomBarForegroundColor}"/>
                <Setter Property="Margin" Value="5 0"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="SeparatorStyle" TargetType="Separator">
        <Setter Property="Height" Value="2"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="DarkGray"/>
    </Style>
    <!--#endregion-->

    <!--#region Add, remove, move button styles-->
    <Style x:Key="AddButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="5,10,5,10"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse Stroke="Black" StrokeThickness="0" Fill="{DynamicResource AddButtonBackgroundColor}"/>
                        <Image Source="/Images/Add_15xMD_white.png" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RemoveButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="5,10,5,10"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse Stroke="Black" StrokeThickness="0" Fill="{DynamicResource DeleteButtonBackgroundColor}"/>
                        <Image Source="/Images/Remove_15xMD.png" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DuplicateButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="5,10,5,10"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse Stroke="Black" StrokeThickness="0" Fill="{DynamicResource DuplicateButtonBackgroundColor}"/>
                        <Image Source="/Images/Copy_16x.png" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AddButtonSquareStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource ButtonSquareBorderColor}" BorderThickness="1" Background="{DynamicResource ButtonSquareBackgroundColor}">
                        <Image Source="/Images/plus_sign.png" Height="15" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ButtonSquareMouseoverBorderColor}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonSquareMouseoverBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RemoveButtonSquareStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Background" Value="Orange"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource ButtonSquareBorderColor}" BorderThickness="1" Background="{DynamicResource ButtonSquareBackgroundColor}">
                        <Image Source="/Images/minus_sign.png" Height="15" Width="15" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ButtonSquareMouseoverBorderColor}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonSquareMouseoverBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MoveUpButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Background" Value="Orange"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource ButtonSquareBorderColor}" BorderThickness="1" Background="{DynamicResource ButtonSquareBackgroundColor}" Padding="1">
                        <Image Source="/Images/Up_arrow.png" Height="15" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ButtonSquareMouseoverBorderColor}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonSquareMouseoverBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MoveDownButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Background" Value="Orange"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource ButtonSquareBorderColor}" BorderThickness="1" Background="{DynamicResource ButtonSquareBackgroundColor}" Padding="1">
                        <Image Source="/Images/Down_arrow.png" Height="15" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ButtonSquareMouseoverBorderColor}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonSquareMouseoverBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HelpButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource HelpButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource HelpButtonForegroundColor}"/>
    </Style>
    <Style x:Key="PopupOkCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="#FF62B4F7"/>
        <Setter Property="Margin" Value="5 8 5 8"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
    </Style>
    <!--#endregion-->

    <!--#region Datagrid elements-->
    <Style x:Key="GroupedStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Margin" Value="0,0,0,5"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True" Background="{DynamicResource GroupItemBackgroundColor}" BorderBrush="{DynamicResource GroupItemBorderColor}" BorderThickness="1,1,1,5"
                              ExpandDirection="Down" ClipToBounds="True">
                        <Expander.Header>
                            <DockPanel>
                                <TextBlock FontWeight="Bold" Text="{Binding Name}" Margin="5,0,0,0" Width="150" Foreground="{DynamicResource GroupItemForegroundColor}"/>
                                <!--<TextBlock FontWeight="Bold" Text="{Binding ItemCount}" Foreground="White"/>-->
                            </DockPanel>
                        </Expander.Header>
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridColumnSeparatorStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="{DynamicResource DataGridColumnSeparatorColor}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridProgressBarStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SelectedCellStyle" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridSelectedCellBackgroundColor}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DataGridSelectedCellBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource DataGridSelectedCellForegroundColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TransactionDataGridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource TransactionDataGridColumnHeaderStyle}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGridBorderColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CellStyle" Value="{DynamicResource TransactionDataGridCellStyle}"/>
        <Setter Property="RowBackground" Value="Transparent"/>
    </Style>
    <Style x:Key="TransactionDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Background" Value="{DynamicResource DataGridHeaderBackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource DataGridHeaderForegroundColor}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGridBorderColor}"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
    </Style>
    <Style x:Key="TransactionDataGridCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource SelectedCellStyle}">
        <Setter Property="Background" Value="{DynamicResource DataGridBackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
    </Style>
    <!--#endregion-->
    <!--#region Chart Styles-->
    <Style TargetType="lvc:PieSeries">
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
    </Style>
    <!--#endregion-->
</ResourceDictionary>